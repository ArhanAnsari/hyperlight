// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Hyperlight.Generated
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct hlfloat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static hlfloat GetRootAshlfloat(ByteBuffer _bb) { return GetRootAshlfloat(_bb, new hlfloat()); }
  public static hlfloat GetRootAshlfloat(ByteBuffer _bb, hlfloat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public hlfloat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Hyperlight.Generated.hlfloat> Createhlfloat(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartTable(1);
    hlfloat.AddValue(builder, value);
    return hlfloat.Endhlfloat(builder);
  }

  public static void Starthlfloat(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<Hyperlight.Generated.hlfloat> Endhlfloat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Hyperlight.Generated.hlfloat>(o);
  }
  public hlfloatT UnPack() {
    var _o = new hlfloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(hlfloatT _o) {
    _o.Value = this.Value;
  }
  public static Offset<Hyperlight.Generated.hlfloat> Pack(FlatBufferBuilder builder, hlfloatT _o) {
    if (_o == null) return default(Offset<Hyperlight.Generated.hlfloat>);
    return Createhlfloat(
      builder,
      _o.Value);
  }
}

public class hlfloatT
{
  public float Value { get; set; }

  public hlfloatT() {
    this.Value = 0.0f;
  }
}


static public class hlfloatVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Value*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
