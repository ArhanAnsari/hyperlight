# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

# This job cleans up old pre-releases and pre-releases packages retaining the last 40 versions

name: Clean up old pre-releases and packages and artifacts
on:
  schedule:
    - cron: '0 8 * * 1' # run at 8am every Monday
  workflow_dispatch: # allow manual triggering
jobs:
  cleanup:
    name: CLean up old pre-releases and packages
    runs-on: ubuntu-20.04
    steps:
      # https://github.com/marketplace/actions/delete-package-versions
      - name: Delete old 'DeisLabs.Hyperlight' package versions
        uses: actions/delete-package-versions@v4
        with: 
          package-name: 'DeisLabs.Hyperlight'
          package-type: 'nuget'
          min-versions-to-keep:  5
          delete-only-pre-release-versions: "true" 
      - name: Delete old 'DeisLabs.HyperlightDependencies' package versions
        uses: actions/delete-package-versions@v4
        with: 
          package-name: 'DeisLabs.HyperlightDependencies'
          package-type: 'nuget'
          min-versions-to-keep:  5
          delete-only-pre-release-versions: "true" 
      # https://github.com/marketplace/actions/delete-releases
      - name: Delete old 'Hyperlight' releases
        uses: sgpublic/delete-release-action@v1.1
        with:
          pre-release-drop: true
          pre-release-keep-count: 5
          pre-release-drop-tag: true
          draft-drop: false
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Delete old Github Actions Artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CUTOFF_DATE=$(date --date='7 days ago' +%s)
          gh api repos/deislabs/hyperlight/actions/artifacts?per_page=100 --paginate | jq -crs --arg date $CUTOFF_DATE \
              'map(.artifacts) \
              | flatten | .[] \
              | select((.created_at | fromdate) < ($date | tonumber) and (.workflow_run.head_branch | test("(release/)?v\\d+\\.\\d+\\.\\d+") | not)) \
              | "\(.id),\(.size_in_bytes)"' > todelete.txt
          awk -F',' '{ sum += $2 }END{ printf "Deleting %d artifacts taking up %d bytes.\n", NR, sum }' todelete.txt
          cut -d "," -f 1 < todelete.txt | xargs -I{} gh api --method DELETE /repos/deislabs/hyperlight/actions/artifacts/{}
        # CUTDOFF_DATE is the date up to which all artifacts will be deleted (in unix timestamp time)
        # gh api ... gets all artifacts older than $CUTOFF_DATE, and writes them to todelete.txt in the format of two columns <artifact_id>,<size_in_bytes>. It excludes artifacts that are part of a release worlkflow: branch (e.g. release/v1.0.0) or tag (e.g. v1.0.0)
        # awk ... calculates the number of artifacts and their total size to be deleted
        # cut ... extracts only the artifact ids column and runs gh api --method DELETE for each artifact
