name: Valgrind tests (Linux only)

# See README.md in this directory for more information about workflow_call
on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always

jobs:
  # this job requires the build-guest-binaries job be complete prior to 
  # its execution. this dependency should be expressed in the dependent
  # workflow
  build:
    strategy:
      fail-fast: true
      matrix:
        # note: we are not running any release builds in this matrix,
        # because valgrind doesn't work well with release builds.
        #
        # in fact, the `cargo valgrind build` command doesn't have an
        # easy way to even run against a release build.
        build: [ubuntu-20.04-debug, linux-kvm-debug, linux-hyperv-debug]
        include:
          - build: ubuntu-20.04-debug
            os: ubuntu-20.04
            hypervisor: none
            config: debug
          - build: linux-kvm-debug
            os: [self-hosted, Linux, X64, "1ES.Pool=HL-Ubuntu-20.04-KVM"]
            hypervisor: kvm
            config: debug
          - build: linux-hyperv-debug
            os: [self-hosted, Linux, X64, "1ES.Pool=HL-CBLMariner-mshv"]
            hypervisor: hyperv
            config: debug
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up env vars for kvm-linux tests
        if: ${{ (matrix.hypervisor == 'kvm') }}
        run: |
          sudo ls -al /dev/kvm
          sudo chgrp $(whoami) /dev/kvm
          sudo ls -al /dev/kvm
          # TODO: move this to an image build in 1ES
          sudo apt-get update
          sudo apt-get install -y build-essential clang 
          echo "KVM_SHOULD_BE_PRESENT=true" >> $GITHUB_ENV
      - uses: dtolnay/rust-toolchain@1.71.0
        with:
          components: clippy, rustfmt
      - name: Install Just
        uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          just-version: '1.5.0' # optional semver specification, otherwise latest
      - name: Set up env vars for hyperv-linux tests
        if: ${{ (matrix.hypervisor == 'hyperv') }}
        run: |
          echo "HYPERV_SHOULD_BE_PRESENT=true" >> $GITHUB_ENV
          echo "HYPERV_SHOULD_HAVE_STABLE_API=false" >> $GITHUB_ENV
      - name: Set up cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest@0.9.54
      - name: Set up munit
        working-directory: src/hyperlight_host/tests_capi
        run: |
          git submodule init
          git submodule update
      # TODO: install valgrind in 1ES image build for KVM
      - name: Install Valgrind dependencies
        if: ${{ (matrix.hypervisor == 'kvm') || (matrix.os == 'ubuntu-20.04') }}
        run: |
                sudo apt-get update
                sudo apt-get install -y libc6-dbg
      - name: Install Valgrind (snap)
        if: ${{ (matrix.hypervisor != 'hyperv') }}
        run: sudo snap install valgrind --classic
      # TODO: install valgrind in 1ES mariner image
      - name: Install Valgrind (Temporary for hyperv)
        if: ${{ (matrix.hypervisor == 'hyperv') }}
        run: sudo dnf install -y valgrind
      - name: Install cargo-valgrind
        run: cargo install cargo-valgrind
      # Rust tests require the test binaries (simpleguest.exe, dummyguest.exe, 
      # etc...) to be in ./src/tests/Hyperlight.Tests/bin/{Release or Debug}/net6.0.
      # 
      # We have a dependency on the 'build-guest-binaries' job, which builds 
      # them and uploads them using the upload-artifact step. we're downloading
      # them here, then moving them to the right location in the subsequent step
      - name: Download Guest Binaries
        uses: actions/download-artifact@v3
        with:
          name: guest-binaries-${{ matrix.config }}
          path: ./src/tests/Hyperlight.Tests/bin/${{ matrix.config }}/net6.0
      - name: Copy Guest Binaries
        run: |
          echo "copying guest binaries for build config ${{ matrix.config }}"
          cp ./dummyguest/x64/${{ matrix.config }}/dummyguest.exe dummyguest.exe
          cp ./simpleguest/x64/${{ matrix.config }}/simpleguest.exe simpleguest.exe
          cp ./callbackguest/x64/${{ matrix.config }}/callbackguest.exe callbackguest.exe
        working-directory: ./src/tests/Hyperlight.Tests/bin/${{ matrix.config }}/net6.0
      - name: Display Guest Binaries
        run: |
          ls -R ./src/tests/Hyperlight.Tests/bin/${{ matrix.config }}/net6.0
      - name: Display Guest Binaries in target location (required by Rust tests)
        run: ls -R
        working-directory: ./src/tests/Hyperlight.Tests/bin/${{ matrix.config }}/net6.0
      - name: Valgrind Rust tests
        env:
            RUSTFLAGS: "--cfg RunningNextest"
        run: cargo valgrind nextest run --run-ignored all 
      - name: Valgrind C tests
        working-directory: src/hyperlight_host
        run: just valgrind-tests-capi  ${{ matrix.config }}

