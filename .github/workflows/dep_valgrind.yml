# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Valgrind tests (Linux only)

# See README.md in this directory for more information about workflow_call
on:
  workflow_call:
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true


env:
  CARGO_TERM_COLOR: always

permissions:
  id-token: write
  contents: read

jobs:
  # this job requires the build-guest-binaries job be complete prior to
  # its execution. this dependency should be expressed in the dependent
  # workflow
  build:
    strategy:
      fail-fast: true
      matrix:
        # note: we are not running any release builds in this matrix,
        # because valgrind doesn't work well with release builds.
        #
        # in fact, the `cargo valgrind build` command doesn't have an
        # easy way to even run against a release build.
        build: [linux-kvm-debug, linux-hyperv-debug]
        include:
          - build: linux-kvm-debug
            os: [self-hosted, Linux, X64, "1ES.Pool=HL-Ubuntu-20.04-KVM"]
            hypervisor: kvm
            config: debug
          - build: linux-hyperv-debug
            os: [self-hosted, Linux, X64, "1ES.Pool=HL-CBLMariner-mshv"]
            hypervisor: hyperv
            config: debug
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: deislabs/hyperlight-workflow-setup@v1.1.0
        with:
          rust-toolchain: "1.74.0"
          azure-client-id: ${{ secrets.ADO_HYPERLIGHT_CARGO_RO_AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up munit
        working-directory: src/hyperlight_capi/tests_capi
        run: |
          git submodule init
          git submodule update

      # TODO: install valgrind in 1ES image build for KVM
      - name: Install Valgrind dependencies
        if: ${{ (matrix.hypervisor == 'kvm') || (matrix.os == 'ubuntu-20.04') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-dbg

      - name: Install Valgrind (snap)
        if: ${{ (matrix.hypervisor != 'hyperv') }}
        run: sudo snap install valgrind --classic

      # TODO: install valgrind in 1ES mariner image
      - name: Install Valgrind (temporary for hyperv)
        if: ${{ (matrix.hypervisor == 'hyperv') }}
        run: sudo dnf install -y valgrind

      - name: Install cargo-valgrind
        run: cargo install cargo-valgrind

      - name: Download Guest Binaries
        uses: actions/download-artifact@v3
        with:
          name: guest-binaries-${{ matrix.config }}
          path: ./downloaded-guest-binaries-${{ matrix.config }}

      - name: Copy Guest Binaries
        run: |
          cp ./downloaded-guest-binaries-${{ matrix.config }}/callbackguest.exe ./src/tests/rust_guests/bin/${{ matrix.config }}/callbackguest.exe
          cp ./downloaded-guest-binaries-${{ matrix.config }}/simpleguest.exe ./src/tests/rust_guests/bin/${{ matrix.config }}/simpleguest.exe
          cp ./downloaded-guest-binaries-${{ matrix.config }}/dummyguest.exe ./src/tests/rust_guests/bin/${{ matrix.config }}/dummyguest.exe

      - name: Valgrind Rust tests
        run: cargo valgrind test capi

      - name: Valgrind C tests
        working-directory: src/hyperlight_capi
        run: just valgrind-tests-capi ${{ matrix.config }}
