# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Create a Release

on:
  workflow_dispatch:
  push:
    branches: [dev]

permissions:
  contents: write
  packages: write # This is needed to publish nuget packages
  id-token: write # Needed for federated auth to our ADO feeds
  pull-requests: read

jobs:
  build-hyperlight-capi:
    uses: ./.github/workflows/dep_build_hyperlight_capi.yml
    secrets: inherit
    with:
      environment: release

  build-rust-ubuntu:
    # see https://github.com/orgs/community/discussions/26286#discussioncomment-3251208 for why we need to check the ref
    if: ${{ contains(github.ref, 'refs/heads/release/') }} ||  ${{ github.ref=='refs/heads/dev' }}
    runs-on: ubuntu-20.04
    environment: release

    steps:
      - uses: actions/checkout@v4

      - name: Install az-cli (Linux mariner) (move into hyperlight-workflow-setup!)
        if: ${{ (runner.os == 'Linux') }}
        run: |
          if command -v dnf > /dev/null 2>&1; then
            sudo dnf install azure-cli -y
          fi
        shell: bash


      - uses: deislabs/hyperlight-workflow-setup@v1.3.0
        with:
          rust-toolchain: "1.74.0"
          azure-client-id: ${{ secrets.ADO_HYPERLIGHT_CARGO_RO_AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Debug
        run: cargo build --verbose

      - name: Build Release
        run: cargo build --verbose --release

  build-rust-windows:
    # see https://github.com/orgs/community/discussions/26286#discussioncomment-3251208 for why we need to check the ref
    if: ${{ contains(github.ref, 'refs/heads/release/') }} ||  ${{ github.ref=='refs/heads/dev' }}
    runs-on: windows-2022
    environment: release

    steps:
      - uses: actions/checkout@v4

      - uses: deislabs/hyperlight-workflow-setup@v1.3.0
        with:
          rust-toolchain: "1.74.0"
          azure-client-id: ${{ secrets.ADO_HYPERLIGHT_CARGO_RO_AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Debug
        run: cargo build --verbose

      - name: Build Release
        run: cargo build --verbose --release

  build-guest-binaries:
    uses: ./.github/workflows/dep_build_guest_binaries.yml
    secrets: inherit
    with:
      environment: release

  fuzzing:
    needs: [build-guest-binaries]
    uses: ./.github/workflows/dep_fuzzing.yml
    with:
      max_total_time: 3600 # 1 hour in seconds
      environment: release
    secrets: inherit

  benchmarks:
    needs: [build-guest-binaries]
    uses: ./.github/workflows/Benchmarks.yml
    secrets: inherit
    with:
      environment: release
    permissions:
      id-token: write
      contents: read

  publish:
    environment: release
    # see https://github.com/orgs/community/discussions/26286#discussioncomment-3251208 for why we need to check the ref
    if: ${{ contains(github.ref, 'refs/heads/release/') }} ||  ${{ github.ref=='refs/heads/dev' }}
    runs-on: windows-2022
    needs:
      [
        build-hyperlight-capi,
        build-rust-ubuntu,
        build-rust-windows,
        build-guest-binaries,
        benchmarks,
      ]

    env:
      PLATFORM: x64
      FRAMEWORK: net6.0
      DOTNET_INSTALL_DIR: "./.dotnet"

    steps:
      - name: Set Debug Configuration
        if: ${{ github.ref=='refs/heads/dev' }}
        run: echo "CONFIG=debug" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh

      - name: Set Release Configuration
        if: ${{ contains(github.ref, 'refs/heads/release/') }}
        run: echo "CONFIG=release" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh

      - uses: actions/checkout@v4

      - uses: deislabs/hyperlight-workflow-setup@v1.3.0
        with:
          rust-toolchain: "1.74.0"
          azure-client-id: ${{ secrets.ADO_HYPERLIGHT_CARGO_RO_AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4.0.0
        with:
          dotnet-version: 6.0.x

      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Fetch printf
        working-directory: src/HyperlightGuest/third_party/printf
        run: git submodule update --init

      - name: Restore
        run: dotnet restore
        shell: pwsh

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Install minver cli
        run: dotnet tool install minver-cli --global
        shell: pwsh

      - name: Set HYPERLIGHT_VERSION
        run: |
          git fetch --tags
          minver -vd -tv -p preview.0 -m 0.1
          echo "HYPERLIGHT_VERSION=$(minver -vd -tv -p preview.0 -m 0.1)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh

      - name: Ensure path exists for debug build
        if: ${{ env.CONFIG }} == "debug"
        run: mkdir -p target\debug
        shell: pwsh

      - name: Ensure path exists for release build
        if: ${{ env.CONFIG }} == "release"
        run: mkdir -p target\release
        shell: pwsh

      - name: Download Debug DLL
        uses: actions/download-artifact@v3
        if: ${{ env.CONFIG }} == "debug"
        with:
          name: debug_assets
          path: target/debug/

      - name: Download Release DLL
        uses: actions/download-artifact@v3
        if: ${{ env.CONFIG }} == "release"
        with:
          name: release_assets
          path: target/release/

      - name: Download Guest Binaries
        uses: actions/download-artifact@v3
        with:
          name: guest-binaries-${{ env.CONFIG }}
          path: ./downloaded-guest-binaries-${{ env.CONFIG }}

      - name: Copy Guest Binaries
        run: |
          cp ./downloaded-guest-binaries-${{ env.CONFIG }}/callbackguest.exe ./src/tests/rust_guests/bin/${{ env.CONFIG }}/callbackguest.exe
          cp ./downloaded-guest-binaries-${{ env.CONFIG }}/simpleguest.exe ./src/tests/rust_guests/bin/${{ env.CONFIG }}/simpleguest.exe
          cp ./downloaded-guest-binaries-${{ env.CONFIG }}/dummyguest.exe ./src/tests/rust_guests/bin/${{ env.CONFIG }}/dummyguest.exe

      - name: Copy Rust Guests for dotnet tests
        run: |
          mkdir -p src\tests\Hyperlight.Tests\rust_guests\bin\${{ env.CONFIG }}
          cp src/tests/rust_guests/bin/${{ env.CONFIG }}/simpleguest.exe src/tests/Hyperlight.Tests/rust_guests/bin/${{ env.CONFIG }}
          cp src/tests/rust_guests/bin/${{ env.CONFIG }}/dummyguest.exe src/tests/Hyperlight.Tests/rust_guests/bin/${{ env.CONFIG }}    
          cp src/tests/rust_guests/bin/${{ env.CONFIG }}/callbackguest.exe src/tests/Hyperlight.Tests/rust_guests/bin/${{ env.CONFIG }}

      # The dotnet test solutions require the c and rust guests to exist before the projects will build
      - name: Build C guests
        run: just build-c-guests ${{ env.CONFIG }}

      - name: Build Solution
        run: msbuild -m hyperlight.sln /p:Configuration=$env:CONFIG /p:Platform=$env:PLATFORM /p:ContinuousIntegrationBuild=true
        shell: pwsh

      - name: Test
        shell: pwsh
        run: dotnet test -c $env:CONFIG
        working-directory: src/tests/Hyperlight.Tests

      - name: Build Example for Windows
        shell: pwsh
        run: dotnet publish -c $env:CONFIG --self-contained -r win-x64 -f $env:FRAMEWORK
        working-directory: src/examples/NativeHost

      - name: Archive Windows Release
        shell: pwsh
        run: 7z a -tzip  ../windows-x64.zip .
        working-directory: src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/publish

      - name: Build Example for Linux
        shell: pwsh
        run: dotnet publish -c $env:CONFIG --self-contained -r linux-x64 -f $env:FRAMEWORK
        working-directory: src/examples/NativeHost

      - name: Archive Linux Release
        shell: pwsh
        run: tar -zcvf ../linux-x64.tar.gz .
        working-directory: src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/publish

      - name: Package Hyperlight
        run: dotnet pack -c $env:CONFIG --include-symbols -p:RepositoryUrl=https://github.com/${{ github.repository }}.git
        working-directory: src/Hyperlight
        shell: pwsh

      - name: Package Hyperlight Dependencies
        run: dotnet pack -c $env:CONFIG --include-symbols
        working-directory: src/HyperlightDependencies
        shell: pwsh

      - name: Publish Github Packages
        # Only publish if we are on a release branch
        if: ${{ contains(github.ref, 'refs/heads/release/') }}
        run: |
          for nupkg in $(find . -name *.nupkg)
          do
            echo Pushing $nupkg
            dotnet nuget push $nupkg --api-key ${{ secrets.GHPACKAGES_PAT }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
          done
        shell: bash
        working-directory: src/

      - name: Download header file
        uses: "actions/download-artifact@v3"
        with:
          name: hyperlight_capi.h

      - name: Download artifacts (debug)
        uses: actions/download-artifact@v3
        if: ${{ env.CONFIG }} == "debug"
        with:
          name: debug_assets

      - name: Download artifacts (release)
        uses: actions/download-artifact@v3
        if: ${{ env.CONFIG }} == "release"
        with:
          name: release_assets

      - name: Download benchmarks (Windows)
        uses: actions/download-artifact@v3
        with:
          name: benchmarks_Windows_none
          path: benchmarks_Windows_none

      - name: Download benchmarks (Linux hyperv)
        uses: actions/download-artifact@v3
        with:
          name: benchmarks_Linux_hyperv
          path: benchmarks_Linux_hyperv

      - name: Download benchmarks (Linux kvm)
        uses: actions/download-artifact@v3
        with:
          name: benchmarks_Linux_kvm
          path: benchmarks_Linux_kvm

      - name: Archive benchmarks
        run: |
          tar -zcvf benchmarks_Windows_none.tar.gz benchmarks_Windows_none
          tar -zcvf benchmarks_Linux_hyperv.tar.gz benchmarks_Linux_hyperv
          tar -zcvf benchmarks_Linux_kvm.tar.gz benchmarks_Linux_kvm

      - name: Install github-cli
        run: |
          $ProgressPreference = 'SilentlyContinue'
          # check if gh cli is installed
          $installed = [bool](Get-Command -ErrorAction Ignore -Type Application gh)
          if ($installed) { Write-Host "gh cli already installed"; exit 0 }
          # download and install gh cli
          Invoke-WebRequest https://github.com/cli/cli/releases/download/v2.50.0/gh_2.50.0_windows_amd64.msi -OutFile gh.msi
          msiexec.exe /i gh.msi /quiet /l log.txt | Out-Null
          Write-Host "msiexec exited with code $LASTEXITCCODE"
          if ($LASTEXITCODE -ne 0) { cat log.txt; exit 1 }

      # Publish the native guests so that its possible to use Hyperlight without building it.
      - name: Create release
        # Only create a release from tag if we are on a release branch
        if: ${{ contains(github.ref, 'refs/heads/release/') }}
        run: |
            gh release create v${{ env.HYPERLIGHT_VERSION }} -t "Release v${{ env.HYPERLIGHT_VERSION }}" --generate-notes `
            src/tests/rust_guests/bin/${{ env.CONFIG }}/callbackguest.exe `
            src/tests/rust_guests/bin/${{ env.CONFIG }}/simpleguest.exe `
            src/tests/rust_guests/bin/${{ env.CONFIG }}/dummyguest.exe `
            src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/windows-x64.zip `
            src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/linux-x64.tar.gz `
            ${{ env.PLATFORM }}/${{ env.CONFIG }}/HyperlightGuest.lib `
            src/HyperlightGuest/include/hyperlight.h `
            src/HyperlightGuest/third_party/printf/printf.h `
            hyperlight_capi.h ` 
            libhyperlight_capi.so `
            libhyperlight_capi.d `
            hyperlight_capi.dll `
            hyperlight_capi.pdb `
            benchmarks_Windows_none.tar.gz `
            benchmarks_Linux_hyperv.tar.gz `
            benchmarks_Linux_kvm.tar.gz
        env:
            GH_TOKEN: ${{ github.token }}
      - name: Create release (latest)
        # Only create a latest release if we are on the dev branch
        if: ${{ github.ref=='refs/heads/dev' }}
        run:  |    
            gh release delete latest -y --cleanup-tag  || $true
            gh release create latest -t "Latest Development Build From Dev Branch"  -p `
            src/tests/rust_guests/bin/${{ env.CONFIG }}/callbackguest.exe `
            src/tests/rust_guests/bin/${{ env.CONFIG }}/simpleguest.exe `
            src/tests/rust_guests/bin/${{ env.CONFIG }}/dummyguest.exe `
            src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/windows-x64.zip `
            src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/linux-x64.tar.gz `
            ${{ env.PLATFORM }}/${{ env.CONFIG }}/HyperlightGuest.lib `
            src/HyperlightGuest/include/hyperlight.h `
            src/HyperlightGuest/third_party/printf/printf.h `
            hyperlight_capi.h `
            libhyperlight_capi.so `
            libhyperlight_capi.d `
            hyperlight_capi.dll `
            hyperlight_capi.pdb `
            src/Hyperlight/bin/x64/debug/Deislabs.HyperLight.${{ env.HYPERLIGHT_VERSION }}.nupkg `
            src/Hyperlight/bin/x64/debug/Deislabs.HyperLight.${{ env.HYPERLIGHT_VERSION }}.snupkg `
            src/HyperlightDependencies/bin/x64/debug/Deislabs.HyperlightDependencies.${{ env.HYPERLIGHT_VERSION }}.nupkg `
            src/HyperlightDependencies/bin/x64/debug/Deislabs.HyperlightDependencies.${{ env.HYPERLIGHT_VERSION }}.snupkg `
            benchmarks_Windows_none.tar.gz `
            benchmarks_Linux_hyperv.tar.gz `
            benchmarks_Linux_kvm.tar.gz 
        env:
            GH_TOKEN: ${{ github.token }}
