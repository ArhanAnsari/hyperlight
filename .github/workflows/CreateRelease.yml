# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

# TODO: Add tests for linux before publish

name: Create a Release

on:
  create:
  workflow_dispatch:
  push:
    branches: [ release/*, dev ]

jobs:
  publish:
    # see https://github.com/orgs/community/discussions/26286#discussioncomment-3251208 for why we need to check the ref
    if:  ${{ contains(github.ref, 'refs/heads/release/') }} ||  ${{ github.ref=='refs/heads/dev' }} 
    runs-on: windows-2022
    needs: [build-rust-ubuntu, build-rust-windows]
    env:
      PLATFORM: x64
      CONFIG: Debug
      FRAMEWORK: net6.0
      DOTNET_INSTALL_DIR: "./.dotnet"
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3.2.0
      with:
        dotnet-version: | 
          6.0.x 
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Fetch printf
      working-directory: src/HyperlightGuest/third_party/printf
      run: git submodule update --init
    - name: Restore
      run: dotnet restore
      shell: pwsh
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.3
      with:
        msbuild-architecture: x64
    - name: Install minver cli
      run: dotnet tool install minver-cli --global 
      shell: pwsh
    - name: Set HYPERLIGHT_VERSION
      run:  echo "HYPERLIGHT_VERSION=$(minver -ve -tv)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      shell: pwsh
    - name: Ensure path exists for debug build
      if: ${{ env.CONFIG }} == "Debug"
      run: mkdir -p target\debug
      shell: pwsh
    - name: Ensure path exists for release build
      if: ${{ env.CONFIG }} == "Release"
      run: mkdir -p target\release
      shell: pwsh
    - name: Download Debug DLL
      uses: actions/download-artifact@v3
      if: ${{ env.CONFIG }} == "Debug"
      with:
        name: ${{ env.CONFIG }}_assets
        path: target/debug/
    - name: Download Release DLL
      uses: actions/download-artifact@v3
      if: ${{ env.CONFIG }} == "Release"
      with:
        name: ${{ env.CONFIG }}_assets
        path: target/release/
    - name: Build Solution
      run: msbuild -m hyperlight.sln /p:Configuration=$env:CONFIG /p:Platform=$env:PLATFORM /p:ContinuousIntegrationBuild=true
      shell: pwsh
    - name: Test
      shell: pwsh
      run: dotnet test -c $env:CONFIG
      working-directory: src/tests/Hyperlight.Tests
    - name: Build Example for Windows 
      shell: pwsh
      run: dotnet publish -c $env:CONFIG --self-contained -r win-x64 -f $env:FRAMEWORK
      working-directory: src/examples/NativeHost
    - name: Archive Windows Release
      shell: pwsh
      run: 7z a -tzip  ../windows-x64.zip .
      working-directory: src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/publish
    - name: Build Example for Linux
      shell: pwsh
      run: dotnet publish -c $env:CONFIG --self-contained -r linux-x64 -f $env:FRAMEWORK
      working-directory: src/examples/NativeHost
    - name: Archive Linux Release
      shell: pwsh
      run: tar -zcvf ../linux-x64.tar.gz .
      working-directory: src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/publish
    - name: Package Hyperlight
      run: dotnet pack -c $env:CONFIG --include-symbols -p:RepositoryUrl=https://github.com/${{ github.repository }}.git 
      working-directory: src/Hyperlight
      shell: pwsh
    - name: Package Hyperlight Dependencies
      run: dotnet pack -c $env:CONFIG --include-symbols
      working-directory: src/HyperlightDependencies
      shell: pwsh
    - name: Publish Github Packages
      # Only publish if we are on a release branch
      if: ${{ contains(github.ref, 'refs/heads/release/') }} 
      run: |
          for nupkg in $(find . -name *.nupkg)
          do
            echo Pushing $nupkg
            dotnet nuget push $nupkg --api-key ${{ secrets.GHPACKAGES_PAT }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
          done
      shell: bash
      working-directory: src/
    - name: Download header file
      uses: "actions/download-artifact@v3"
      with:
        name: hyperlight_capi.h
    - name: Download artifacts
      uses: "actions/download-artifact@v3"
      with:
        name: ${{ env.CONFIG }}_assets
    - name: List downloaded artifacts
      run: ls -lR target/
      shell: bash
    # Publish the native guests so that its possible to use Hyperlight without building it.
    - name: Create Release 
      # Only create a release from tag if we are on a release branch
      if: ${{ contains(github.ref, 'refs/heads/release/') }} 
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: v${{ env.HYPERLIGHT_VERSION }}
        title: "Release v${{ env.HYPERLIGHT_VERSION }}"
        files: |
          src/tests/Guests/callbackguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/callbackguest.exe
          src/tests/Guests/dummyguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/dummyguest.exe
          src/tests/Guests/simpleguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/simpleguest.exe
          src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/windows-x64.zip
          src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/linux-x64.tar.gz
          ${{ env.PLATFORM }}/${{ env.CONFIG }}/HyperlightGuest.lib
          src/HyperlightGuest/include/hyperlight.h
          src/HyperlightGuest/third_party/printf/printf.h
          hyperlight_capi.h
          libhyperlight_capi.so
          libhyperlight_capi.d
          hyperlight_capi.dll
          hyperlight_capi.pdb
    - name: Create Release (latest)
      # Only create a latest release if we are on the dev branch
      if: ${{ github.ref=='refs/heads/dev' }}
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: latest
        title: "Latest Development Build"
        files: |
          src/tests/Guests/callbackguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/callbackguest.exe
          src/tests/Guests/dummyguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/dummyguest.exe          
          src/tests/Guests/simpleguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/simpleguest.exe
          src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/windows-x64.zip
          src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/linux-x64.tar.gz
          ${{ env.PLATFORM }}/${{ env.CONFIG }}/HyperlightGuest.lib
          src/HyperlightGuest/include/hyperlight.h
          src/HyperlightGuest/third_party/printf/printf.h
          hyperlight_capi.h
          libhyperlight_capi.so
          libhyperlight_capi.d
          hyperlight_capi.dll
          hyperlight_capi.pdb
          src/Hyperlight/bin/x64/Debug/Deislabs.HyperLight.*.nupkg
          src/Hyperlight/bin/x64/Debug/Deislabs.HyperLight.*.snupkg
          src/HyperlightDependencies/bin/x64/Debug/Deislabs.HyperlightDependencies.*.nupkg
          src/HyperlightDependencies/bin/x64/Debug/Deislabs.HyperlightDependencies.*.snupkg
  build-rust-ubuntu:
    # see https://github.com/orgs/community/discussions/26286#discussioncomment-3251208 for why we need to check the ref
    if:  ${{ contains(github.ref, 'refs/heads/release/') }} ||  ${{ github.ref=='refs/heads/dev' }} 
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@1.71.0
        with:
          components: clippy, rustfmt
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          just-version: '1.5.0' # optional semver specification, otherwise latest
      - name: Build Debug
        run: cargo build --verbose
      - name: Build Release 
        run: cargo build --verbose --release
      - name: Upload shared object file for debug
        uses: actions/upload-artifact@v3
        with:
          name: Debug_assets
          if-no-files-found: error
          path: | 
            target/debug/libhyperlight_capi.so
            target/debug/libhyperlight_capi.d
      - name: Upload shared object file for release
        uses: actions/upload-artifact@v3
        with:
          name: Release_assets
          if-no-files-found: error
          path: | 
            target/release/libhyperlight_capi.so
            target/release/libhyperlightcapi.d
      - name: Upload header file
        uses: actions/upload-artifact@v3
        with:
          name: hyperlight_capi.h
          if-no-files-found: error
          path: src/hyperlight_capi/include/hyperlight_capi.h
  build-rust-windows:
    # see https://github.com/orgs/community/discussions/26286#discussioncomment-3251208 for why we need to check the ref
    if:  ${{ contains(github.ref, 'refs/heads/release/') }} ||  ${{ github.ref=='refs/heads/dev' }} 
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
      ###
      ### Build HyperlightSurrogate.exe
      ###
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3
        with:
          msbuild-architecture: x64
      - name: Build HyperlightSurrogate.exe Debug
        run: msbuild -m hyperlight.sln -target:HyperlightSurrogate:Rebuild /p:Configuration=Debug
        shell: pwsh
      - name: Build HyperlightSurrogate.exe Release
        run: msbuild -m hyperlight.sln -target:HyperlightSurrogate:Rebuild /p:Configuration=Release
        shell: pwsh
      ###
      ### Build rust stuff
      ###
      - uses: dtolnay/rust-toolchain@1.71.0
        with:
          components: clippy, rustfmt
      - name: Build Debug
        run: cargo build --verbose
      - name: Build Release
        run: cargo build --verbose --release
      - name: Upload debug DLL file
        uses: actions/upload-artifact@v3
        with:
          name: Debug_assets
          if-no-files-found: error
          path: |
            target/debug/hyperlight_capi.dll
            target/debug/hyperlight_capi.pdb
      - name: Upload release DLL file
        uses: actions/upload-artifact@v3
        with:
          name: Release_assets
          if-no-files-found: error
          path: target/release/hyperlight_capi.dll
