# TODO: When Github Actions allows Reusable Workflows with strategies then move build test to a reuasble workflow.
# https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations

# TODO: Add tests for linux before publish

name: Push to main

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  publish:
    runs-on: windows-latest
    needs: [build-rust-ubuntu, build-rust-windows]
    env:
      PLATFORM: x64
      CONFIG: Debug
      FRAMEWORK: net6.0
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: | 
          6.0.x 
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Restore
      run: dotnet restore
      shell: pwsh
    - name: Set MINVERBUILDMETADATA
      run:  echo "MINVERBUILDMETADATA=$(git rev-parse --short ${{ github.sha }})" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      shell: pwsh
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64
    - name: Ensure path exists for debug build
      if: ${{ env:CONFIG }} == "Debug"
      run: mkdir -p target\debug
      shell: pwsh
    - name: Ensure path exists for release build
      if: ${{ env.CONFIG }} == "Release"
      run: mkdir -p target\release
      shell: pwsh
    - name: Download Debug DLL
      uses: actions/download-artifact@v3
      if: ${{ env.CONFIG }} == "Debug"
      with:
        name: ${{ env.CONFIG }}_assets
        path: target/debug/
    - name: Download Release DLL
      uses: actions/download-artifact@v3
      if: ${{ env:CONFIG }} == "Release"
      with:
        name: ${{ env.CONFIG }}_assets
        path: target/release/
    - name: Build Solution
      run: msbuild hyperlight.sln /p:Configuration=$env:CONFIG /p:Platform=$env:PLATFORM /p:ContinuousIntegrationBuild=true
      shell: pwsh
    - name: Test
      shell: pwsh
      run: dotnet test -c $env:CONFIG
      working-directory: src/tests/Hyperlight.Tests
    - name: Build Example for Windows 
      shell: pwsh
      run: dotnet publish -c $env:CONFIG --self-contained -r win-x64 -f $env:FRAMEWORK
      working-directory: src/examples/NativeHost
    - name: Archive Windows Release
      shell: pwsh
      run: 7z a -tzip  ../windows-x64.zip .
      working-directory: src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/publish
    - name: Build Example for Linux
      shell: pwsh
      run: dotnet publish -c $env:CONFIG --self-contained -r linux-x64 -f $env:FRAMEWORK
      working-directory: src/examples/NativeHost
    - name: Archive Linux Release
      shell: pwsh
      run: tar -zcvf ../linux-x64.tar.gz .
      working-directory: src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/publish
    - name: Package solution
      run: dotnet pack -c $env:CONFIG --include-symbols -p:RepositoryUrl=https://github.com/${{ github.repository }}.git 
      working-directory: src/Hyperlight
      shell: pwsh
    - name: Publish Github Packages
      run: |
          for nupkg in $(find . -name *.nupkg)
          do
            echo Pushing $nupkg
            dotnet nuget push $nupkg --api-key ${{ secrets.GHPACKAGES_PAT }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
          done
      shell: bash
      working-directory: src/Hyperlight
    - name: Download header file
      uses: "actions/download-artifact@v3"
      with:
        name: hyperlight_host.h
    - name: Download artifacts
      uses: "actions/download-artifact@v3"
      with:
        name: ${{ env.CONFIG }}_assets
    - name: List downloaded artifacts
      run: ls -lR target/
    # Publish the native guests so that its possible to use Hyperlight without building it.
    - name: Create Release (latest)
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: latest
        title: "Latest Development Build From Main Branch"
        files: |
          src/tests/Guests/callbackguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/callbackguest.exe
          src/tests/Guests/simpleguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/simpleguest.exe
          src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/windows-x64.zip
          src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/linux-x64.tar.gz
          ${{ env.PLATFORM }}/${{ env.CONFIG }}/HyperlightGuest.lib
          src/HyperlightGuest/include/hyperlight.h
          src/HyperlightGuest/third_party/printf/printf.h
          hyperlight_host.h
          libhyperlight_host.so
          hyperlight_host.dll
    - name: Store Shortened Git SHA for release
      run: echo "::set-output name=shortened_sha::$(git rev-parse --short HEAD)"
      id: set-output-var
    - name: Create Release (shortened SHA)
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: "${{ steps.set-output-var.outputs.shortened_sha }}"
        title: "Release ${{steps.vars.outputs.shortened_sha}}"
        files: |
          src/tests/Guests/callbackguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/callbackguest.exe
          src/tests/Guests/simpleguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/simpleguest.exe
          src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/win-x64/windows-x64.zip
          src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/${{ env.FRAMEWORK }}/linux-x64/linux-x64.tar.gz
          ${{ env.PLATFORM }}/${{ env.CONFIG }}/HyperlightGuest.lib
          src/HyperlightGuest/include/hyperlight.h
          src/HyperlightGuest/third_party/printf/printf.h
          hyperlight_host.h
          libhyperlight_host.so
          hyperlight_host.dll

  build-rust-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: extractions/setup-just@v1
        with:
          just-version: '0.10' # optional semver specification, otherwise latest
      - name: Build Debug
        run: cargo build --verbose
      - name: Build Release 
        run: cargo build --verbose --release
      - name: Upload shared object file for debug
        uses: actions/upload-artifact@v3
        with:
          name: Debug_assets
          path: target/debug/libhyperlight_host.so
      - name: Upload shared object file for release
        uses: actions/upload-artifact@v3
        with:
          name: Release_assets
          path: target/release/libhyperlight_host.so
      - name: Upload header file
        uses: actions/upload-artifact@v3
        with:
          name: hyperlight_host.h
          path: src/hyperlight_host/include/hyperlight_host.h
  build-rust-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Build Debug
        run: cargo build --verbose
      - name: Build Release
        run: cargo build --verbose --release
      - name: Upload debug DLL file
        uses: actions/upload-artifact@v3
        with:
          name: Debug_assets
          path: target/debug/hyperlight_host.dll
      - name: Upload release DLL file
        uses: actions/upload-artifact@v3
        with:
          name: Release_assets
          path: target/debug/hyperlight_host.dll
