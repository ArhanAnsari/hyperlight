# TODO: When Github Actions allows Reusable Workflows with strategies then move build test to a reuasble workflow.
# https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations

# TODO: Add tests for linux before publish

name: Push to main

on:
  push:
    branches: [ main ]
  
jobs:
  publish:
    runs-on: windows-latest
    env:
      PLATFORM: x64
      CONFIG: Debug
      FRAMEWORK: net6.0
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          5.0.x
          6.0.x 
    - name: Restore
      run: dotnet restore
      shell: pwsh
    - name: Set MINVERBUILDMETADATA
      run:  echo "MINVERBUILDMETADATA=$(git rev-parse --short ${{ github.sha }})" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      shell: pwsh
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64
    - name: Build Solution
      run: msbuild hyperlight.sln /p:Configuration=$env:CONFIG /p:Platform=$env:PLATFORM /p:ContinuousIntegrationBuild=true
      shell: pwsh
    - name: Test
      shell: pwsh
      run: dotnet test -c $env:CONFIG
      working-directory: src/tests/Hyperlight.Tests
    - name: Build Example for Windows 
      shell: pwsh
      run: dotnet publish -c $env:CONFIG --self-contained -r win-x64 -f $env:FRAMEWORK
      working-directory: src/examples/NativeHost
    - name: Archive Windows Release
      shell: pwsh
      run: 7z a -tzip  ../windows-x64.zip .
      working-directory: src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/net5.0/win-x64/publish
    - name: Build Example for Linux
      shell: pwsh
      run: dotnet publish -c $env:CONFIG --self-contained -r linux-x64 -f $env:FRAMEWORK
      working-directory: src/examples/NativeHost
    - name: Archive Linux Release
      shell: pwsh
      run: tar -zcvf ../linux-x64.tar.gz .
      working-directory: src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/net5.0/linux-x64/publish
    - name: Package solution
      run: dotnet pack -c $env:CONFIG --include-symbols -p:RepositoryUrl=https://github.com/${{ github.repository }}.git 
      working-directory: src/Hyperlight
      shell: pwsh
    - name: Publish Github Packages
      run: |
           for nupkg in $(find . -name *.nupkg)
           do
            echo Pushing $nupkg
            dotnet nuget push $nupkg --api-key ${{ secrets.GHPACKAGES_PAT }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
           done
      shell: bash
      working-directory: src/Hyperlight
    # Publish the native guests so that its possible to use Hyperlight without building it.
    - name: Create Release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: latest
        title: "Latest Development Build From Main Branch"
        files: |
           src/tests/Guests/callbackguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/callbackguest.exe
           src/tests/Guests/simpleguest/${{ env.PLATFORM }}/${{ env.CONFIG }}/simpleguest.exe
           src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/net5.0/win-x64/windows-x64.zip
           src/examples/NativeHost/bin/${{ env.PLATFORM }}/${{ env.CONFIG }}/net5.0/linux-x64/linux-x64.tar.gz