# TODO: When Github Actions allows Reusable Workflows with strategies then move build test to a reuasble workflow.
# https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations

name: Validate Pull Request

on:
  pull_request:
    branches: [ main ]
  
jobs:
  build-host-library-debug:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, windows-latest]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Just
      uses: extractions/setup-just@v1
      with:
        just-version: '0.10' # optional semver specification, otherwise latest
    - name: Build hyperlight_host library
      working-directory: src/hyperlight_host
      run: just build
    - name: upload hyperlight_host.h
      uses: actions/upload-artifact@v3
      with:
        name: hyperlight_host.h
        path: src/hyperlight_host/include/hyperlight_host.h
    - name: upload hyperlight_host.dll (Windows only)
      uses: actions/upload-artifact@v3
      if: runner.os == 'Windows'
      with:
        name: Debug_assets
        path: target/debug/hyperlight_host.dll
    - name: upload libhyperlight_host.so (Linux only)
      uses: actions/upload-artifact@v3
      if: runner.os == 'Linux'
      with:
        name: Debug_assets
        path: target/debug/libhyperlight_host.so
  build-host-library-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, windows-latest]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Just
      uses: extractions/setup-just@v1
      with:
        just-version: '0.10' # optional semver specification, otherwise latest
    - name: Build hyperlight_host library
      working-directory: src/hyperlight_host
      run: just build-release
    - name: upload hyperlight_host.h
      uses: actions/upload-artifact@v3
      with:
        name: hyperlight_host_.h
        path: src/hyperlight_host/include/hyperlight_host.h
    - name: upload hyperlight_host.dll (Windows only)
      uses: actions/upload-artifact@v3
      if: runner.os == 'Windows'
      with:
        name: Release_assets
        path: target/release/hyperlight_host.dll
    - name: upload libhyperlight_host.so (Linux only)
      uses: actions/upload-artifact@v3
      if: runner.os == 'Linux'
      with:
        name: Release_assets
        path: target/release/libhyperlight_host.so
  build-on-windows:
    runs-on: ${{ matrix.os }}
    needs: [ build-host-library-release, build-host-library-debug ]
    strategy:
      fail-fast: true
      matrix:
        build: [ windows-debug, windows-release]
        include:
          - build: windows-debug
            os: [self-hosted, Windows, X64, whp]
            config: Debug
            platform: x64
            path: target/debug
          - build: windows-release
            os: [self-hosted, Windows, X64, whp]
            config: Release
            platform: x64
            path: target/release
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    # this is a workaround for the issue described at https://github.com/dotnet/sourcelink/issues/675 , it supresses the warning about the sourcelink package not being found.
    - name: Remove Submodule
      run: git rm munit
      shell: pwsh   
      working-directory: src/hyperlight_host/tests_capi
    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: | 
          6.0.x 
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Restore
      run: dotnet restore
      shell: pwsh
    - name: Set MINVERBUILDMETADATA
      run:  echo "MINVERBUILDMETADATA=$(git rev-parse --short ${{ github.sha }})" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      shell: pwsh
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64
    - name: Download hyperlight_host.dll
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.config}}_assets 
        path: ${{ matrix.path }}
    - name: Build Solution
      run: msbuild hyperlight.sln /p:Configuration=${{ matrix.config }} /p:Platform=${{ matrix.platform }} /p:ContinuousIntegrationBuild=true
      shell: pwsh
    - name: Test
      shell: pwsh
      run: dotnet test -c ${{ matrix.config }} --logger "trx;verbosity=detailed;LogFilePrefix=win-${{ matrix.config }}" --blame
      working-directory: src/tests/Hyperlight.Tests
    - name: Build Example
      shell: pwsh
      run: dotnet build -c ${{ matrix.config }}
      working-directory: src/examples/NativeHost
    - name: Run Example
      shell: pwsh
      run:  dotnet run -c ${{ matrix.config }} -- -nowait
      working-directory: src/examples/NativeHost
    - name: Upload Binary Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: guest-binaries-${{ matrix.config }}
        path: src\tests\Guests\*\${{ matrix.platform }}\${{ matrix.config }}\*['.exe', '.pdb', !'.recipe']
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.config }}
        path: src\tests\Hyperlight.Tests\TestResults\*.trx
  build-on-linux:
    needs: [ build-on-windows, build-host-library-release, build-host-library-debug ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        build: [ linux-kvm-debug, linux-kvm-release, linux-hyperv-debug, linux-hyperv-release]
        include:
          - build: linux-kvm-debug
            os: [self-hosted, Linux, X64, kvm]
            config: Debug
            platform: x64
            hypervisor: kvm
          - build: linux-kvm-release
            os: [self-hosted, Linux, X64, kvm]
            config: Release
            platform: x64
            hypervisor: kvm
          - build: linux-hyperv-debug
            os: [self-hosted, Linux, X64, hyperv]
            config: Debug
            platform: x64
            hypervisor: hyperv
          - build: linux-hyperv-release
            os: [self-hosted, Linux, X64, hyperv]
            config: Release
            platform: x64
            hypervisor: hyperv
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    # this is a workaround for the issue described at https://github.com/dotnet/sourcelink/issues/675 , it supresses the warning about the sourcelink package not being found.
    - name: Remove Submodule
      run: git rm munit
      shell: bash  
      working-directory: src/hyperlight_host/tests_capi
    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: |
          6.0.x 
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Restore
      run: dotnet restore
      shell: bash
    - name: Set MINVERBUILDMETADATA
      run:  echo "MINVERBUILDMETADATA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV 
      shell: bash
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: guest-binaries-${{ matrix.config }}
        path: src/tests/Guests/
    - name: Download libhyperlight_host.so
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.config}}_assets
        path: target/${{ matrix.config }}
    - name: List downloaded artificats
      run: ls -lR target/
      shell: bash
    - name: Build Hyperlight
      shell: bash
      run: dotnet build -c ${{ matrix.config }}
      working-directory: src/Hyperlight
    - name: Build Example
      shell: bash
      run: dotnet build -c ${{ matrix.config }}
      working-directory: src/examples/NativeHost
    - name: Run Example
      shell: bash
      run:  dotnet run -c ${{ matrix.config }} -- -nowait
      working-directory: src/examples/NativeHost
    - name: Test
      shell: bash
      run: dotnet test -c ${{ matrix.config }} --logger "trx;verbosity=detailed;LogFilePrefix=linux-${{ matrix.config }}-${{ matrix.hypervisor }}" --blame
      working-directory: src/tests/Hyperlight.Tests
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.config }}-${{ matrix.hypervisor }}
        path: src/tests/Hyperlight.Tests/TestResults/*.trx
