# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish crates to intenral cargo registry

on:
  workflow_dispatch:
  workflow_call:
    secrets:
        ADO_HYPERLIGHT_CARGO_RO_AZURE_CLIENT_ID:
          required: true
        AZURE_TENANT_ID:
          required: true

permissions:
  contents: read
  id-token: write

jobs:
  publish-hyperlight-packages:
    environment: release
    runs-on: ubuntu-latest

    # We should only publish from dev if minver contains `-preview`
    if: ${{ contains(github.ref, 'refs/heads/release/') }} || ${{ github.ref=='refs/heads/dev' }}

    steps:
      - uses: actions/checkout@v4

      - uses: deislabs/hyperlight-workflow-setup@v1.3.0
        with:
          rust-toolchain: "1.78.0"
          azure-client-id: ${{ secrets.ADO_HYPERLIGHT_CARGO_RW_AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Set up cargo workspaces version
        run: |
          cargo install cargo-workspaces
          cargo install minver_rs
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.Name "${{ github.actor }}"

      - name: Set crate versions
        run: |
          git fetch --tags
          # for debugging...
          cat .git/HEAD
          git symbolic-ref HEAD
          git describe
          git describe --all
          MINVER_LOG_LEVEL=trace MINVER_TAG_PREFIX=v MINVER_AUTO_INCREMENT_LEVEL=Minor MINVER_PRERELEASE_IDENTIFIER=preview minver
          # end debugging...
          version=$(MINVER_TAG_PREFIX=v MINVER_AUTO_INCREMENT_LEVEL=Minor MINVER_PRERELEASE_IDENTIFIER=preview minver)
          echo "Setting version to $version"
          cargo ws version --force=hyperlight_* --no-git-commit --yes custom $version
          echo "HYPERLIGHT_VERSION=$version" >> "$GITHUB_ENV"

      - name: Determine if we should publish crates
        run: |
          echo "github.ref=${{ github.ref }}"
          echo "HYPERLIGHT_VERSION=$HYPERLIGHT_VERSION"
          if [[ ${{ github.ref }} =~ 'refs/heads/release/' || ( ${{ github.ref }} == 'refs/heads/dev' &&  $HYPERLIGHT_VERSION =~ '-preview' ) ]]
            echo "SHOULD_PUBLISH=true" >> "$GITHUB_env"
          fi
      # `allow-dirty` is needed in the publish below because we are using the `--no-git-commit`
      # option above to cover the case where no changes are made by cargo ws version because the version
      # is already correct
      - name: Publish hyperlight-flatbuffers
        if: ${{ env.SHOULD_PUBLISH == true}}
        run: cargo publish --manifest-path ./src/hyperlight_common/Cargo.toml --registry hyperlight_packages --allow-dirty

      - name: Publish hyperlight-guest
        if: ${{ env.SHOULD_PUBLISH == true}}
        run: cargo publish --manifest-path ./src/hyperlight_guest/Cargo.toml --registry hyperlight_packages --allow-dirty

      - name: Publish hyperlight-host
        if: ${{ env.SHOULD_PUBLISH == true}}
        run: cargo publish --manifest-path ./src/hyperlight_host/Cargo.toml --registry hyperlight_packages --allow-dirty

      # `--no-verify` is needed because the build.rs script generates ./include/hyperlight_capi.h
      # and cargo does not want you to modify files outside of OUT_DIR
      - name: Publish hyperlight-capi
        if: ${{ env.SHOULD_PUBLISH == true}}
        run: cargo publish --manifest-path ./src/hyperlight_capi/Cargo.toml --registry hyperlight_packages --no-verify --allow-dirty

      - name: Publish hyperlight-guestlib-c-includes
        if: ${{ env.SHOULD_PUBLISH == true}}
        run: cargo publish --manifest-path ./src/HyperlightGuest/Cargo.toml --registry hyperlight_packages --allow-dirty
